<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<link rel="apple-touch-icon" sizes="76x76" href="/img/apple-icon.png">
	<link rel="icon" type="image/png" href="/img/favicon.png">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

	<title>N.A.M T.E.C.H</title>

	<meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />

	<!--     Fonts and icons     -->
	<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Roboto+Slab:400,700|Material+Icons" />
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css" />

	<!-- CSS Files -->
    <link href="/css/bootstrap.min.css" rel="stylesheet" />
	<link href="/css/material-kit.min.css" rel="stylesheet"/>
	<!-- <script src="/js/vue.js" type="text/javascript"></script> -->
	<script src="https://cdn.jsdelivr.net/npm/vue"></script>
</head>

<body class="index-page">
<div id="app">
	<nav class="navbar navbar-default navbar-transparent navbar-fixed-top navbar-color-on-scroll" color-on-scroll=" " id="sectionsNav">
    	<div class="container">
        	<div class="navbar-header">
        		<a class="navbar-brand" href="/">Welcome to Oshin Page</a>
        	</div>
    	</div>
    </nav>

	<div class="page-header header-filter clear-filter" data-parallax="true" style="background-image: url('/img/bg0.jpg');">
		<div class="container">
			<div class="row">
				<div class="col-md-8 col-md-offset-2">
					<div class="brand">
						<h1>Oshin Page</h1>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="main main-raised">
		<div class="section">
			<div class="container">
				<div id="buttons" class="cd-section">
					<div class="title">
						<h2>The Permission Filter</h2>
					</div>
					<div class="row">
						<div class="col-md-2">
							<small>Products</small>
							<select class="selectpicker" data-style="form-control" title="Single Select" data-size="7" v-model="productSelected">
								<option disabled selected>Choose option</option>
								<option v-for="product in products" :value="product">{{ product.name | uppercase}}</option>
							</select>
						</div>
						<div class="col-md-2">
							<small>Modules</small>
							<select class="selectpicker" data-style="form-control" title="All" data-size="7" v-model="moduleSelected">
								<option selected :value="modules">All</option>
								<option v-for="(module, key) in modules" :value="{key: module}">{{ module.name }}</option>
							</select>
						</div>
						<div class="col-md-2">
							<button class="col-md-6 btn btn-primary btn-sm" @click="filterPermission()">Filter</button>
						</div>
					</div>
				</div>

				<div class="row">
					<div class="table-responsive">
						<table class="table table-bordered">
							<tr>
								<td rowspan="2" class="text-center">Module</td>
								<td rowspan="2" class="text-center">Claim</td>
								<td :colspan="roles.length" class="text-center">{{ productSelected.name | uppercase }}</td>
							</tr>
							<tr>
								<td >&nbsp;</td>
								<td v-for="role in roles" v-if="role.code">{{ role.name }}</td>
							</tr>
							<template v-for="(module, key1) in moduleCurrent" v-if="checkProductType(module.productTypes)">
								<template v-for="(claim, key2, index2) in moduleCurrent[key1].claim">
									<tr v-for="(roleY, indexY) in claim.roleCodes" >
										<td v-if="(index2 === 0) && (indexY === 0)" :rowspan="calculateRowspan(key1)" class="text-center">{{ module.name | uppercase}}</td>
										<td v-if="indexY === 0" :rowspan="claim.roleCodes.length" class="text-center">{{ claim.name | uppercase }} {{claim.code}}</td>
										<td v-if="claim.roleCodes.length > 1 || roleY.code">{{ roleY.name }}</td>
										<td v-if="claim.roleCodes.length === 1 && !roleY.code"></td>				<!---->
										<td v-for="(roleX, indexX) in roles" v-if="roleX.code">
											<div class="checkbox" style="margin-left: calc(50% - 15px);">
												<label>
													<input type="checkbox" class="init-permission-checkbox" name="optionsCheckboxes" 
													:checked="checkPermission(moduleCurrent[key1].claim[key2].code, roleX.code, roleY.code)" 
													@change="updatePermission(moduleCurrent[key1].claim[key2].code, roleX.code, roleY.code)"
													>
												</label>
												<!-- :disabled="(indexY !== 0) && (indexX >= indexY)" -->							
											</div>
										</td>
									</tr>
								</template>
							</template>
						</table>
					</div>
				</div>

				<div class="row">
					<div class="col-md-4">
						<button class="col-md-6 btn btn-primary" @click="exportPermission()">Export permission</button>
					</div>
				</div>
			</div>
		</div>
		<footer class="footer">
			<div class="container">
				<nav class="pull-left">
					<ul>
						<li>
							<a href="#">
								Copyright by N.A.M T.E.CH
							</a>
						</li>
						<li>
							<a href="#">
							About Us
							</a>
						</li>
						<li>
							<a href="#">
							Blog
							</a>
						</li>
						<li>
							<a href="#">
								Licenses
							</a>
						</li>
					</ul>
				</nav>
				<div class="copyright pull-right">
					&copy; <script>document.write(new Date().getFullYear())</script>, made with <i class="material-icons">favorite</i> by N.A.M T.E.C.H.
				</div>
			</div>
		</footer>
	</div>
</div>
</body>
	<script src="/js/jquery.min.js" type="text/javascript"></script>
	<script src="/js/bootstrap.min.js" type="text/javascript"></script>
	<script src="/js/material.min.js"></script>
	<script src="/js/bootstrap-selectpicker.js" type="text/javascript"></script>
	<script src="/js/material-kit.js" type="text/javascript"></script>
	<script>
		Vue.filter('uppercase', function (value) {
			if (!value) return '';
			return value.toUpperCase();
		})

		new Vue({
			el: '#app',
			data: {
				permissions: [],
				products: [],
				roles: [],
				rolesTo: [],
				modules: {},
				
				productSelected: {},
				moduleSelected: null,
				moduleCurrent: null,

				rolesFromSelected: [],
				i: 0
			},
			mounted() {
				this.getProduct();
				this.getModules();
				setTimeout(() => {
					this.getRolesByProduct(this.productSelected.code);
					setTimeout(() => {
						this.getListPermission(this.productSelected.code);
					}, 1000);
				}, 400);
			},
			methods: {
				sendAjax(method, url, data) {
					var xhr = new XMLHttpRequest();
					xhr.open(method, url);
					xhr.setRequestHeader('Content-Type', 'application/json');
					xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
					xhr.withCredentials = true;
					if (!data) {
						xhr.send();
					} else {
						xhr.send(JSON.stringify(data));
					}
					return xhr;
				},
				getProduct() {
					let vmThis = this;
					let xhr = this.sendAjax('GET', '/api/product/all');
					xhr.onload = function() {
						if (xhr.status === 200) {
							vmThis.products = JSON.parse(xhr.responseText).data;
							vmThis.productSelected = vmThis.products[3];
							Vue.set(vmThis, 'products', vmThis.products);
							Vue.nextTick(function () {
								vmThis.updateSelectPicker();
							})
						}
					}
				},
				getRolesByProduct(productCode) {
					let vmThis = this;
					this.roles = [];
					this.rolesFromSelected = [];
					
					if (!productCode) 
						return;
					
					let xhr = this.sendAjax('GET', `/api/role/product-code?productCode=${productCode}`);
					xhr.onload = function() {
						if (xhr.status === 200) {
							vmThis.roles = JSON.parse(xhr.responseText).data;
							let roleSelf = [{name: 'Self', code: null}];
							vmThis.roles = roleSelf.concat(vmThis.roles);
							Vue.set(vmThis, 'roles', vmThis.roles);
							vmThis.updateSelectPicker();
						}
					}
				},
				getModules() {
					let vmThis = this;
					this.modules = {};
					this.moduleCurrent = {};

					let xhr = this.sendAjax('GET', `/api/permission/all-module`);
					xhr.onload = function() {
						if (xhr.status === 200) {
							let data = JSON.parse(xhr.responseText).data;
							this.modules = data;
							this.moduleCurrent = data;
							Vue.set(vmThis, 'modules', data);
							Vue.set(vmThis, 'moduleCurrent', data);							
							vmThis.updateSelectPicker();
						}
					}
				},
				getListPermission(productCode, moduleCode = '', claimCode = '') {
					let vmThis = this;
					let url = `/api/permission/list?productCode=${productCode}&module=${moduleCode}&claimCode=${claimCode}`;

					let xhr = this.sendAjax('GET', url);
					xhr.onload = function() {
						if (xhr.status === 200) {
							vmThis.permissions = JSON.parse(xhr.responseText).data;
							Vue.set(vmThis, 'permissions', vmThis.permissions);
							console.log('total permission: ', vmThis.permissions.length);
						}
					}
				},
				checkPermission(claimCode, roleCodeX, roleCodeY = null) {
					let permission;

					if (typeof(roleCodeY) !== 'number' && !roleCodeY) {
						permission = this.permissions.find((key) => {
							if (!key.toRole && key.claim === claimCode && roleCodeX === key.fromRole && key.toRole === null)
								return key;
						});
					}
					else {
						permission = this.permissions.find((key) => {
							if (key.toRole && key.claim === claimCode && roleCodeX === key.fromRole && roleCodeY === key.toRole)
								return key;
						});
					}
					if (permission) 
						return true;
					else 
						return false;
				},
				getSelectedFromRole() {
					let vmThis = this;
					this.rolesFromSelected = [];
					$('#from_roles').change(function() {
						let rolesFromSelected = $('#from_roles').val();
						vmThis.rolesFromSelected = vmThis.tranformerRoleSelected(rolesFromSelected);
						vmThis.getRoleTo();
					});
				},
				updatePermission(claimCode, roleCodeX, roleCodeY = null) {

					let xhr;
					let method;
					let url;
					let vmThis = this;
					let indexPermission;

					//find position need update.
					if (typeof(roleCodeY) !== 'number' && !roleCodeY)
						for(let i = 0; i < this.permissions.length; i++) {
							if (this.permissions[i] && this.permissions[i].claim === claimCode && this.permissions[i].fromRole === roleCodeX && !this.permissions[i].toRole) {
								indexPermission = i;
								break;
							}
						}
					else
						for(let i = 0; i < this.permissions.length; i++) {
							if (this.permissions[i] && this.permissions[i].claim === claimCode && this.permissions[i].fromRole === roleCodeX && this.permissions[i].toRole === roleCodeY) {
								indexPermission = i;
								break;
							}
						}

					if (indexPermission && this.permissions[indexPermission]) {
						method = 'DELETE';
						url = `/api/permission/${this.permissions[indexPermission]._id}`;
					}
					else {
						method =  'POST';
						url = `/api/permission`;
					}

					let data = {
						product: this.productSelected.code,
						claim: claimCode,
						fromRole: roleCodeX,
						toRole: roleCodeY,
					}
					
					if (method === 'DELETE')
						xhr = this.sendAjax(method, url);
					else 
						xhr = this.sendAjax(method, url, data);
					
					xhr.onload = function() {
						if (xhr.status === 200) {
							let result = JSON.parse(xhr.responseText);
							if (method === 'DELETE')
								vmThis.permissions.splice(indexPermission, 1);
							else if (method === 'POST')
								vmThis.permissions.push(result.data);							
						} 
						else
							console.log('Error');
					}					
				},
				exportPermission() {
					if (!this.productSelected)
						return 'Error export permission';

					let url = `/api/permission/export?productCode=${this.productSelected.code}`
					let xhr = this.sendAjax('GET', url);
					xhr.onload = function() {
						if (xhr.status === 200) {
							console.log(JSON.parse(xhr.responseText));
						}
					}
				},
				updateSelectPicker() {
					Vue.nextTick(function () {
						$('.selectpicker').selectpicker('refresh');
					});
				},
				filterPermission() {
					this.moduleCurrent = this.moduleSelected;
					console.log('this.moduleCurrent: ', this.moduleCurrent);
					Vue.set(this, 'moduleCurrent', this.moduleCurrent);
					setTimeout(() => {
						this.getRolesByProduct(this.productSelected.code);
						this.getListPermission(this.productSelected.code, this.moduleCurrent.key ? this.moduleCurrent.key.code : '');
					}, 200);
				},
				checkProductType(productTypes) {
					if (!productTypes || !productTypes.length)
						return false;
					let productType = productTypes.find(item => item === this.productSelected.type);
					if (productType)
						return true;
					else
						return false;
				},
				checkRoleCode(roleCodes, roleCode) {
					if (!roleCodes || !roleCodes.length)
						return false;
					let role = roleCodes.find(item => item === roleCode);
					if (role)
						return true;
					else
						return false;
				},
				calculateRowspan(key) {
					let rowSpan = 0;
					Object.keys(this.moduleCurrent[key].claim).forEach(m => {
						if (this.moduleCurrent[key].claim[m].roleCodes.length)
							rowSpan = rowSpan + this.moduleCurrent[key].claim[m].roleCodes.length;
					});
					console.log()
					return rowSpan;
				}
			}
		})
	</script>
</html>
